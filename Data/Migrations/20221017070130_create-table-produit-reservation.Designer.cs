// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221017070130_create-table-produit-reservation")]
    partial class createtableproduitreservation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entites.Devises.Devise", b =>
                {
                    b.Property<int>("DeviseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviseId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviseId");

                    b.ToTable("Devise");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Domaine", b =>
                {
                    b.Property<int>("DomaineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DomaineId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DomaineId");

                    b.ToTable("Domaine");
                });

            modelBuilder.Entity("Domain.Entites.Produits.Categorie", b =>
                {
                    b.Property<int>("CategorieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategorieId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DomaineId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategorieId");

                    b.HasIndex("DomaineId");

                    b.ToTable("Categorie");
                });

            modelBuilder.Entity("Domain.Entites.Produits.CategTarifaire", b =>
                {
                    b.Property<int>("CategTarifaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategTarifaireId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategTarifaireId");

                    b.ToTable("CategTarifaire");
                });

            modelBuilder.Entity("Domain.Entites.Produits.ClientTarif", b =>
                {
                    b.Property<int>("ClientTarifId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientTarifId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Tarif")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ClientTarifId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProduitId");

                    b.ToTable("ClientTarif");
                });

            modelBuilder.Entity("Domain.Entites.Produits.ProdCatTarifaire", b =>
                {
                    b.Property<int>("ProdCatTarifaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProdCatTarifaireId"), 1L, 1);

                    b.Property<int?>("CategTarifaireId")
                        .HasColumnType("int");

                    b.Property<int?>("DeviseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Tarif")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProdCatTarifaireId");

                    b.HasIndex("CategTarifaireId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("ProduitId");

                    b.ToTable("ProdCatTarifaire");
                });

            modelBuilder.Entity("Domain.Entites.Produits.Produit", b =>
                {
                    b.Property<int>("ProduitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProduitId"), 1L, 1);

                    b.Property<int?>("CategorieId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FamilleId")
                        .HasColumnType("int");

                    b.Property<string>("Fichier1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fichier2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fichier3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("LoadPlanning")
                        .HasColumnType("bit");

                    b.Property<bool?>("LoadSite")
                        .HasColumnType("bit");

                    b.Property<int?>("Nombre")
                        .HasColumnType("int");

                    b.Property<string>("TypeProduit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProduitId");

                    b.HasIndex("CategorieId");

                    b.ToTable("Produit");
                });

            modelBuilder.Entity("Domain.Entites.Produits.ProduitComposant", b =>
                {
                    b.Property<int>("ProduitComposantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProduitComposantId"), 1L, 1);

                    b.Property<int?>("ProduitComposantFilsId")
                        .HasColumnType("int");

                    b.Property<int?>("ProduitComposantParentId")
                        .HasColumnType("int");

                    b.Property<int?>("QteFils")
                        .HasColumnType("int");

                    b.HasKey("ProduitComposantId");

                    b.ToTable("ProduitComposant");
                });

            modelBuilder.Entity("Domain.Entites.Produits.ProduitTarif", b =>
                {
                    b.Property<int>("ProduitTarifId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProduitTarifId"), 1L, 1);

                    b.Property<int>("DeviseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<bool?>("Somme")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Tarif")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("Taxable")
                        .HasColumnType("bit");

                    b.HasKey("ProduitTarifId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("ProduitId");

                    b.ToTable("ProduitTarif");
                });

            modelBuilder.Entity("Domain.Entites.Produits.PromoTarif", b =>
                {
                    b.Property<int>("PromoTarifId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromoTarifId"), 1L, 1);

                    b.Property<int>("DeviseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Tarif")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PromoTarifId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("ProduitId");

                    b.ToTable("PromoTarif");
                });

            modelBuilder.Entity("Domain.Entites.Produits.Typetiers", b =>
                {
                    b.Property<int>("TypetiersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypetiersId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypetiersId");

                    b.ToTable("Typetiers");
                });

            modelBuilder.Entity("Domain.Entites.Produits.TypetiersTarif", b =>
                {
                    b.Property<int>("TypetiersTarifId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypetiersTarifId"), 1L, 1);

                    b.Property<int>("DeviseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Tarif")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TypetiersId")
                        .HasColumnType("int");

                    b.HasKey("TypetiersTarifId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("ProduitId");

                    b.HasIndex("TypetiersId");

                    b.ToTable("TypetiersTarif");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"), 1L, 1);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BanqueId")
                        .HasColumnType("int");

                    b.Property<int?>("CategorieId")
                        .HasColumnType("int");

                    b.Property<int?>("CiviliteId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CodePostal")
                        .HasColumnType("int");

                    b.Property<int?>("DeviseId")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupeId")
                        .HasColumnType("int");

                    b.Property<string>("Justificatif")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NbPer")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaysId")
                        .HasColumnType("int");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Siren")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Societe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Taxable")
                        .HasColumnType("bit");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeClient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypetiersId")
                        .HasColumnType("int");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Delai", b =>
                {
                    b.Property<int>("DelaiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DelaiId"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("Annule")
                        .HasColumnType("int");

                    b.Property<string>("Deconexion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnArrive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnDepart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Modifie")
                        .HasColumnType("int");

                    b.Property<int?>("Resa")
                        .HasColumnType("int");

                    b.HasKey("DelaiId");

                    b.ToTable("Delai");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.FichierResa", b =>
                {
                    b.Property<int>("FichierResaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FichierResaId"), 1L, 1);

                    b.Property<string>("Fichier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FichierResaId");

                    b.ToTable("FichierResa");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Fournisseur", b =>
                {
                    b.Property<int>("FournisseurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FournisseurId"), 1L, 1);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DelaiLivraison")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeviseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("FraisLivraison")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaiementModeId")
                        .HasColumnType("int");

                    b.Property<string>("PeriodeDePaiement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FournisseurId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("PaiementModeId");

                    b.ToTable("Fournisseur");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Identite", b =>
                {
                    b.Property<int>("IdentiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentiteId"), 1L, 1);

                    b.Property<int>("CliendId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdentiteId");

                    b.HasIndex("ClientId");

                    b.ToTable("Identite");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.PaiementMode", b =>
                {
                    b.Property<int>("PaiementModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaiementModeId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaiementModeId");

                    b.ToTable("PaiementMode");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.PlanningConsult", b =>
                {
                    b.Property<int>("PlanningConsultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanningConsultId"), 1L, 1);

                    b.Property<string>("PeriodeApres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodeAvant")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlanningConsultId");

                    b.ToTable("PlanningConsult");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"), 1L, 1);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Etat")
                        .HasColumnType("int");

                    b.Property<int?>("ModepayementId")
                        .HasColumnType("int");

                    b.Property<int?>("NombrePax")
                        .HasColumnType("int");

                    b.Property<string>("NumRes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ObjetId")
                        .HasColumnType("int");

                    b.Property<int?>("PaiementModeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProId")
                        .HasColumnType("int");

                    b.Property<int?>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantite")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("StatutId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("PaiementModeId");

                    b.HasIndex("ProduitId");

                    b.HasIndex("StatutId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.ReservationMotif", b =>
                {
                    b.Property<int>("ReservationMotifId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationMotifId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Motif")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("TypeModif")
                        .HasColumnType("bit");

                    b.HasKey("ReservationMotifId");

                    b.ToTable("ReservationMotif");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Statut", b =>
                {
                    b.Property<int>("StatutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatutId"), 1L, 1);

                    b.Property<string>("Couleur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadLibelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatutId");

                    b.ToTable("Statut");
                });

            modelBuilder.Entity("Domain.Entites.Societes.CategComptable", b =>
                {
                    b.Property<int>("CategComptableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategComptableId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategComptableId");

                    b.ToTable("CategComptable");
                });

            modelBuilder.Entity("Domain.Entites.Societes.CategFacturation", b =>
                {
                    b.Property<int>("CategFacturationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategFacturationId"), 1L, 1);

                    b.Property<string>("CodeFact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompteurId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiseEnPage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NbExemplaire")
                        .HasColumnType("int");

                    b.Property<string>("Periodicite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategFacturationId");

                    b.HasIndex("CompteurId");

                    b.ToTable("CategFacturation");
                });

            modelBuilder.Entity("Domain.Entites.Societes.CategHotel", b =>
                {
                    b.Property<int>("CategHotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategHotelId"), 1L, 1);

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategHotelId");

                    b.ToTable("CategHotel");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Civilite", b =>
                {
                    b.Property<int>("CiviliteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CiviliteId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CiviliteId");

                    b.ToTable("Civilite");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Collaborateur", b =>
                {
                    b.Property<int>("CollaborateurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollaborateurId"), 1L, 1);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartementId")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MetierId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CollaborateurId");

                    b.HasIndex("MetierId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Collaborateur");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Compte", b =>
                {
                    b.Property<int>("CompteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompteId"), 1L, 1);

                    b.Property<bool?>("Auxiliaire")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sens")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompteId");

                    b.ToTable("Compte");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Config.Compteur", b =>
                {
                    b.Property<int>("CompteurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompteurId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NbSuffixe")
                        .HasColumnType("int");

                    b.Property<string>("Prefixe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Separateur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffixe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Table")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompteurId");

                    b.ToTable("Compteur");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"), 1L, 1);

                    b.Property<int?>("CiviliteId")
                        .HasColumnType("int");

                    b.Property<string>("Fonction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaysId")
                        .HasColumnType("int");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SocieteId")
                        .HasColumnType("int");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.HasIndex("CiviliteId");

                    b.HasIndex("PaysId");

                    b.HasIndex("SocieteId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Departement", b =>
                {
                    b.Property<int>("DepartementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartementId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartementId");

                    b.ToTable("Departement");
                });

            modelBuilder.Entity("Domain.Entites.Societes.FormeJuridique", b =>
                {
                    b.Property<int>("FormeJuridiqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormeJuridiqueId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormeJuridiqueId");

                    b.ToTable("FormeJuridique");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Metier", b =>
                {
                    b.Property<int>("MetierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetierId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MetierId");

                    b.ToTable("Metier");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Pays", b =>
                {
                    b.Property<int>("PaysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaysId"), 1L, 1);

                    b.Property<string>("Code2car")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code3car")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CodeChiffre")
                        .HasColumnType("int");

                    b.Property<string>("Fuseauhoraire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibelleENG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibelleFR")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaysId");

                    b.ToTable("Pays", (string)null);

                    b.HasData(
                        new
                        {
                            PaysId = 1,
                            Code2car = "AW",
                            Code3car = "ABW",
                            CodeChiffre = 533,
                            LibelleENG = "ARUBA",
                            LibelleFR = "ARUBA"
                        },
                        new
                        {
                            PaysId = 2,
                            Code2car = "AF",
                            Code3car = "AFG",
                            CodeChiffre = 4,
                            LibelleENG = "AFGHANISTAN",
                            LibelleFR = "AFGHANISTAN"
                        },
                        new
                        {
                            PaysId = 3,
                            Code2car = "AO",
                            Code3car = "AGO",
                            CodeChiffre = 24,
                            LibelleENG = "ANGOLA",
                            LibelleFR = "ANGOLA"
                        },
                        new
                        {
                            PaysId = 4,
                            Code2car = "AI",
                            Code3car = "AIA",
                            CodeChiffre = 660,
                            LibelleENG = "ANGUILLA",
                            LibelleFR = "ANGUILLA"
                        },
                        new
                        {
                            PaysId = 5,
                            Code2car = "AL",
                            Code3car = "ALB",
                            CodeChiffre = 8,
                            LibelleENG = "ALBANIE",
                            LibelleFR = "ALBANIE"
                        },
                        new
                        {
                            PaysId = 6,
                            Code2car = "AD",
                            Code3car = "AND",
                            CodeChiffre = 20,
                            LibelleENG = "ANDORRES",
                            LibelleFR = "ANDORRES"
                        },
                        new
                        {
                            PaysId = 7,
                            Code2car = "AN",
                            Code3car = "ANT",
                            CodeChiffre = 530,
                            LibelleENG = "NETHERLANDS ANTILLES",
                            LibelleFR = "NETHERLANDS ANTILLES"
                        },
                        new
                        {
                            PaysId = 8,
                            Code2car = "AE",
                            Code3car = "ARE",
                            CodeChiffre = 784,
                            LibelleENG = "EMIRATS ARABES UNIS",
                            LibelleFR = "EMIRATS ARABES UNIS"
                        },
                        new
                        {
                            PaysId = 9,
                            Code2car = "AR",
                            Code3car = "ARG",
                            CodeChiffre = 32,
                            LibelleENG = "ARGENTINE",
                            LibelleFR = "ARGENTINE"
                        });
                });

            modelBuilder.Entity("Domain.Entites.Societes.Professionnel", b =>
                {
                    b.Property<int>("ProfessionnelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfessionnelId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaysId")
                        .HasColumnType("int");

                    b.Property<string>("Siren")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Societe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypetiersId")
                        .HasColumnType("int");

                    b.HasKey("ProfessionnelId");

                    b.HasIndex("PaysId");

                    b.HasIndex("TypetiersId");

                    b.ToTable("Professionnel");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartementId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.HasIndex("DepartementId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Societe", b =>
                {
                    b.Property<int>("SocieteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SocieteId"), 1L, 1);

                    b.Property<string>("AdressCompl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Capital")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CategHotelId")
                        .HasColumnType("int");

                    b.Property<string>("ChampLibre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChampLibre2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChampLibre3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormeJuridiqueId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaysId")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionCode")
                        .HasColumnType("int");

                    b.Property<string>("Stat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SocieteId");

                    b.HasIndex("CategHotelId");

                    b.HasIndex("FormeJuridiqueId");

                    b.HasIndex("PaysId");

                    b.ToTable("Societe");
                });

            modelBuilder.Entity("Domain.Entites.Produits.Categorie", b =>
                {
                    b.HasOne("Domain.Entites.Objets.Domaine", "Domaine")
                        .WithMany()
                        .HasForeignKey("DomaineId");

                    b.Navigation("Domaine");
                });

            modelBuilder.Entity("Domain.Entites.Produits.ClientTarif", b =>
                {
                    b.HasOne("Domain.Entites.Reservations.Client", "Client")
                        .WithMany("ClientTarif")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Produits.Produit", "Produit")
                        .WithMany("ClientTarif")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Domain.Entites.Produits.ProdCatTarifaire", b =>
                {
                    b.HasOne("Domain.Entites.Produits.CategTarifaire", "CategTarifaire")
                        .WithMany("ProdCatTarifaires")
                        .HasForeignKey("CategTarifaireId");

                    b.HasOne("Domain.Entites.Devises.Devise", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId");

                    b.HasOne("Domain.Entites.Produits.Produit", "Produit")
                        .WithMany("ProdCatTarifaire")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategTarifaire");

                    b.Navigation("Devise");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Domain.Entites.Produits.Produit", b =>
                {
                    b.HasOne("Domain.Entites.Produits.Categorie", "Categorie")
                        .WithMany("Produits")
                        .HasForeignKey("CategorieId");

                    b.Navigation("Categorie");
                });

            modelBuilder.Entity("Domain.Entites.Produits.ProduitTarif", b =>
                {
                    b.HasOne("Domain.Entites.Devises.Devise", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Produits.Produit", "Produit")
                        .WithMany("ProduitTarif")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devise");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Domain.Entites.Produits.PromoTarif", b =>
                {
                    b.HasOne("Domain.Entites.Devises.Devise", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Produits.Produit", "Produit")
                        .WithMany("PromoTarif")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devise");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Domain.Entites.Produits.TypetiersTarif", b =>
                {
                    b.HasOne("Domain.Entites.Devises.Devise", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Produits.Produit", "Produit")
                        .WithMany("TypetiersTarif")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Produits.Typetiers", "Typetiers")
                        .WithMany()
                        .HasForeignKey("TypetiersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devise");

                    b.Navigation("Produit");

                    b.Navigation("Typetiers");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Fournisseur", b =>
                {
                    b.HasOne("Domain.Entites.Devises.Devise", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId");

                    b.HasOne("Domain.Entites.Reservations.PaiementMode", "PaiementMode")
                        .WithMany()
                        .HasForeignKey("PaiementModeId");

                    b.Navigation("Devise");

                    b.Navigation("PaiementMode");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Identite", b =>
                {
                    b.HasOne("Domain.Entites.Reservations.Client", "Client")
                        .WithMany("Identite")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Reservation", b =>
                {
                    b.HasOne("Domain.Entites.Reservations.Client", "Client")
                        .WithMany("Reservation")
                        .HasForeignKey("ClientId");

                    b.HasOne("Domain.Entites.Reservations.PaiementMode", "PaiementMode")
                        .WithMany()
                        .HasForeignKey("PaiementModeId");

                    b.HasOne("Domain.Entites.Produits.Produit", "Produit")
                        .WithMany("Reservation")
                        .HasForeignKey("ProduitId");

                    b.HasOne("Domain.Entites.Reservations.Statut", "Statut")
                        .WithMany()
                        .HasForeignKey("StatutId");

                    b.Navigation("Client");

                    b.Navigation("PaiementMode");

                    b.Navigation("Produit");

                    b.Navigation("Statut");
                });

            modelBuilder.Entity("Domain.Entites.Societes.CategFacturation", b =>
                {
                    b.HasOne("Domain.Entites.Societes.Config.Compteur", "Compteur")
                        .WithMany("CategFacturations")
                        .HasForeignKey("CompteurId");

                    b.Navigation("Compteur");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Collaborateur", b =>
                {
                    b.HasOne("Domain.Entites.Societes.Metier", "Metier")
                        .WithMany("Collaborateurs")
                        .HasForeignKey("MetierId");

                    b.HasOne("Domain.Entites.Societes.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("Metier");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Contact", b =>
                {
                    b.HasOne("Domain.Entites.Societes.Civilite", "Civilite")
                        .WithMany("Contacts")
                        .HasForeignKey("CiviliteId");

                    b.HasOne("Domain.Entites.Societes.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId");

                    b.HasOne("Domain.Entites.Societes.Societe", "Societe")
                        .WithMany("Contacts")
                        .HasForeignKey("SocieteId");

                    b.Navigation("Civilite");

                    b.Navigation("Pays");

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Professionnel", b =>
                {
                    b.HasOne("Domain.Entites.Societes.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId");

                    b.HasOne("Domain.Entites.Produits.Typetiers", "Typetiers")
                        .WithMany()
                        .HasForeignKey("TypetiersId");

                    b.Navigation("Pays");

                    b.Navigation("Typetiers");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Service", b =>
                {
                    b.HasOne("Domain.Entites.Societes.Departement", "Departement")
                        .WithMany()
                        .HasForeignKey("DepartementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departement");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Societe", b =>
                {
                    b.HasOne("Domain.Entites.Societes.CategHotel", "CategHotel")
                        .WithMany()
                        .HasForeignKey("CategHotelId");

                    b.HasOne("Domain.Entites.Societes.FormeJuridique", "FormeJuridique")
                        .WithMany("Societes")
                        .HasForeignKey("FormeJuridiqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Societes.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategHotel");

                    b.Navigation("FormeJuridique");

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("Domain.Entites.Produits.Categorie", b =>
                {
                    b.Navigation("Produits");
                });

            modelBuilder.Entity("Domain.Entites.Produits.CategTarifaire", b =>
                {
                    b.Navigation("ProdCatTarifaires");
                });

            modelBuilder.Entity("Domain.Entites.Produits.Produit", b =>
                {
                    b.Navigation("ClientTarif");

                    b.Navigation("ProdCatTarifaire");

                    b.Navigation("ProduitTarif");

                    b.Navigation("PromoTarif");

                    b.Navigation("Reservation");

                    b.Navigation("TypetiersTarif");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Client", b =>
                {
                    b.Navigation("ClientTarif");

                    b.Navigation("Identite");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Civilite", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Config.Compteur", b =>
                {
                    b.Navigation("CategFacturations");
                });

            modelBuilder.Entity("Domain.Entites.Societes.FormeJuridique", b =>
                {
                    b.Navigation("Societes");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Metier", b =>
                {
                    b.Navigation("Collaborateurs");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Societe", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
