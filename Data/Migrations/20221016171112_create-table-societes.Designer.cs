// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221016171112_create-table-societes")]
    partial class createtablesocietes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entites.Produits.Typetiers", b =>
                {
                    b.Property<int>("TypetiersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypetiersId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypetiersId");

                    b.ToTable("Typetiers");
                });

            modelBuilder.Entity("Domain.Entites.Societes.CategComptable", b =>
                {
                    b.Property<int>("CategComptableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategComptableId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategComptableId");

                    b.ToTable("CategComptable");
                });

            modelBuilder.Entity("Domain.Entites.Societes.CategFacturation", b =>
                {
                    b.Property<int>("CategFacturationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategFacturationId"), 1L, 1);

                    b.Property<string>("CodeFact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompteurId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiseEnPage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NbExemplaire")
                        .HasColumnType("int");

                    b.Property<string>("Periodicite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategFacturationId");

                    b.HasIndex("CompteurId");

                    b.ToTable("CategFacturation");
                });

            modelBuilder.Entity("Domain.Entites.Societes.CategHotel", b =>
                {
                    b.Property<int>("CategHotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategHotelId"), 1L, 1);

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategHotelId");

                    b.ToTable("CategHotel");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Civilite", b =>
                {
                    b.Property<int>("CiviliteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CiviliteId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CiviliteId");

                    b.ToTable("Civilite");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Collaborateur", b =>
                {
                    b.Property<int>("CollaborateurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollaborateurId"), 1L, 1);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartementId")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MetierId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CollaborateurId");

                    b.HasIndex("MetierId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Collaborateur");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Compte", b =>
                {
                    b.Property<int>("CompteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompteId"), 1L, 1);

                    b.Property<bool?>("Auxiliaire")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sens")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompteId");

                    b.ToTable("Compte");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Config.Compteur", b =>
                {
                    b.Property<int>("CompteurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompteurId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NbSuffixe")
                        .HasColumnType("int");

                    b.Property<string>("Prefixe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Separateur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffixe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Table")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompteurId");

                    b.ToTable("Compteur");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"), 1L, 1);

                    b.Property<int?>("CiviliteId")
                        .HasColumnType("int");

                    b.Property<string>("Fonction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaysId")
                        .HasColumnType("int");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SocieteId")
                        .HasColumnType("int");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.HasIndex("CiviliteId");

                    b.HasIndex("PaysId");

                    b.HasIndex("SocieteId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Departement", b =>
                {
                    b.Property<int>("DepartementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartementId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartementId");

                    b.ToTable("Departement");
                });

            modelBuilder.Entity("Domain.Entites.Societes.FormeJuridique", b =>
                {
                    b.Property<int>("FormeJuridiqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormeJuridiqueId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormeJuridiqueId");

                    b.ToTable("FormeJuridique");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Metier", b =>
                {
                    b.Property<int>("MetierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetierId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MetierId");

                    b.ToTable("Metier");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Pays", b =>
                {
                    b.Property<int>("PaysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaysId"), 1L, 1);

                    b.Property<string>("Code2car")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code3car")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CodeChiffre")
                        .HasColumnType("int");

                    b.Property<string>("Fuseauhoraire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibelleENG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibelleFR")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaysId");

                    b.ToTable("Pays");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Professionnel", b =>
                {
                    b.Property<int>("ProfessionnelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfessionnelId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaysId")
                        .HasColumnType("int");

                    b.Property<string>("Siren")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Societe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypetiersId")
                        .HasColumnType("int");

                    b.HasKey("ProfessionnelId");

                    b.HasIndex("PaysId");

                    b.HasIndex("TypetiersId");

                    b.ToTable("Professionnel");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartementId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.HasIndex("DepartementId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Societe", b =>
                {
                    b.Property<int>("SocieteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SocieteId"), 1L, 1);

                    b.Property<string>("AdressCompl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Capital")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CategHotelId")
                        .HasColumnType("int");

                    b.Property<string>("ChampLibre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChampLibre2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChampLibre3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormeJuridiqueId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaysId")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionCode")
                        .HasColumnType("int");

                    b.Property<string>("Stat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SocieteId");

                    b.HasIndex("CategHotelId");

                    b.HasIndex("FormeJuridiqueId");

                    b.HasIndex("PaysId");

                    b.ToTable("Societe");
                });

            modelBuilder.Entity("Domain.Entites.Societes.CategFacturation", b =>
                {
                    b.HasOne("Domain.Entites.Societes.Config.Compteur", "Compteur")
                        .WithMany("CategFacturations")
                        .HasForeignKey("CompteurId");

                    b.Navigation("Compteur");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Collaborateur", b =>
                {
                    b.HasOne("Domain.Entites.Societes.Metier", "Metier")
                        .WithMany("Collaborateurs")
                        .HasForeignKey("MetierId");

                    b.HasOne("Domain.Entites.Societes.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("Metier");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Contact", b =>
                {
                    b.HasOne("Domain.Entites.Societes.Civilite", "Civilite")
                        .WithMany("Contacts")
                        .HasForeignKey("CiviliteId");

                    b.HasOne("Domain.Entites.Societes.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId");

                    b.HasOne("Domain.Entites.Societes.Societe", "Societe")
                        .WithMany("Contacts")
                        .HasForeignKey("SocieteId");

                    b.Navigation("Civilite");

                    b.Navigation("Pays");

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Professionnel", b =>
                {
                    b.HasOne("Domain.Entites.Societes.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId");

                    b.HasOne("Domain.Entites.Produits.Typetiers", "Typetiers")
                        .WithMany()
                        .HasForeignKey("TypetiersId");

                    b.Navigation("Pays");

                    b.Navigation("Typetiers");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Service", b =>
                {
                    b.HasOne("Domain.Entites.Societes.Departement", "Departement")
                        .WithMany()
                        .HasForeignKey("DepartementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departement");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Societe", b =>
                {
                    b.HasOne("Domain.Entites.Societes.CategHotel", "CategHotel")
                        .WithMany()
                        .HasForeignKey("CategHotelId");

                    b.HasOne("Domain.Entites.Societes.FormeJuridique", "FormeJuridique")
                        .WithMany("Societes")
                        .HasForeignKey("FormeJuridiqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Societes.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategHotel");

                    b.Navigation("FormeJuridique");

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Civilite", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Config.Compteur", b =>
                {
                    b.Navigation("CategFacturations");
                });

            modelBuilder.Entity("Domain.Entites.Societes.FormeJuridique", b =>
                {
                    b.Navigation("Societes");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Metier", b =>
                {
                    b.Navigation("Collaborateurs");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Societe", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
