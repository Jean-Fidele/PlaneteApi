// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221019050914_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entites.Banques.Banque", b =>
                {
                    b.Property<int>("BanqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BanqueId"), 1L, 1);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroCompte")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BanqueId");

                    b.ToTable("Banque");
                });

            modelBuilder.Entity("Domain.Entites.Banques.BanqueStructure", b =>
                {
                    b.Property<int>("BanqueStructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BanqueStructureId"), 1L, 1);

                    b.Property<string>("Champ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Longueur")
                        .HasColumnType("int");

                    b.Property<string>("TypeChamp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BanqueStructureId");

                    b.ToTable("BanqueStructure");
                });

            modelBuilder.Entity("Domain.Entites.Devises.CotationDevise", b =>
                {
                    b.Property<int>("CotationDeviseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CotationDeviseId"), 1L, 1);

                    b.Property<decimal?>("ACHAT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DeviseId")
                        .HasColumnType("int");

                    b.Property<int>("DeviseIdRep")
                        .HasColumnType("int");

                    b.Property<decimal?>("ETABLISSEMENT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MID")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("REPORTING")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("VENTE")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CotationDeviseId");

                    b.HasIndex("DeviseId");

                    b.ToTable("CotationDevise");
                });

            modelBuilder.Entity("Domain.Entites.Devises.Devise", b =>
                {
                    b.Property<int>("DeviseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviseId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviseId");

                    b.ToTable("Devise");
                });

            modelBuilder.Entity("Domain.Entites.Devises.TenuCptDevise", b =>
                {
                    b.Property<int>("TenuCptDeviseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenuCptDeviseId"), 1L, 1);

                    b.Property<int>("DeviseId")
                        .HasColumnType("int");

                    b.Property<int?>("HOTEL")
                        .HasColumnType("int");

                    b.Property<int?>("LOGISTIC")
                        .HasColumnType("int");

                    b.Property<int?>("RESTO")
                        .HasColumnType("int");

                    b.HasKey("TenuCptDeviseId");

                    b.HasIndex("DeviseId");

                    b.ToTable("TenuCptDevise");
                });

            modelBuilder.Entity("Domain.Entites.Devises.Unite", b =>
                {
                    b.Property<int>("UniteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniteId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniteId");

                    b.ToTable("Unite");
                });

            modelBuilder.Entity("Domain.Entites.Frais.Frais", b =>
                {
                    b.Property<int>("FraisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FraisId"), 1L, 1);

                    b.Property<bool?>("AppliAnnule")
                        .HasColumnType("bit");

                    b.Property<bool?>("AppliModif")
                        .HasColumnType("bit");

                    b.Property<decimal?>("FraisAnnule")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FraisModif")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FraisId");

                    b.ToTable("Frais");
                });

            modelBuilder.Entity("Domain.Entites.Frais.TaxeListe", b =>
                {
                    b.Property<int>("TaxeListeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxeListeId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Compte")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Expression")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeTaxe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Valeur")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TaxeListeId");

                    b.ToTable("TaxeListe");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Domaine", b =>
                {
                    b.Property<int>("DomaineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DomaineId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DomaineId");

                    b.ToTable("Domaine");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Famille", b =>
                {
                    b.Property<int>("FamilleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FamilleId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DomaineId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ParentLibelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FamilleId");

                    b.HasIndex("DomaineId");

                    b.ToTable("Famille");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Maintenance", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceId"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ObjetId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MaintenanceId");

                    b.HasIndex("ObjetId");

                    b.ToTable("Maintenance");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Objet", b =>
                {
                    b.Property<int>("ObjetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObjetId"), 1L, 1);

                    b.Property<int?>("Capacite")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DomaineId")
                        .HasColumnType("int");

                    b.Property<byte>("EnMaintenance")
                        .HasColumnType("tinyint");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PlanningLoad")
                        .HasColumnType("bit");

                    b.Property<string>("Statut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeObjetId")
                        .HasColumnType("int");

                    b.HasKey("ObjetId");

                    b.HasIndex("DomaineId");

                    b.HasIndex("TypeObjetId");

                    b.ToTable("Objet");
                });

            modelBuilder.Entity("Domain.Entites.Objets.ObjetProduit", b =>
                {
                    b.Property<int>("ObjetProduitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObjetProduitId"), 1L, 1);

                    b.Property<int>("NbProduit")
                        .HasColumnType("int");

                    b.Property<int?>("ObjetId")
                        .HasColumnType("int");

                    b.Property<int?>("ProduitId")
                        .HasColumnType("int");

                    b.HasKey("ObjetProduitId");

                    b.HasIndex("ObjetId");

                    b.ToTable("ObjetProduit");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DomaineId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOption")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OptionId");

                    b.HasIndex("DomaineId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("Domain.Entites.Objets.OptionList", b =>
                {
                    b.Property<int>("OptionListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionListId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OptionId")
                        .HasColumnType("int");

                    b.HasKey("OptionListId");

                    b.HasIndex("OptionId");

                    b.ToTable("OptionList");
                });

            modelBuilder.Entity("Domain.Entites.Objets.OptionsObjets", b =>
                {
                    b.Property<int>("OptionsObjetsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionsObjetsId"), 1L, 1);

                    b.Property<int?>("ObjetId")
                        .HasColumnType("int");

                    b.Property<int?>("OptionId")
                        .HasColumnType("int");

                    b.Property<string>("Valeur")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OptionsObjetsId");

                    b.HasIndex("ObjetId");

                    b.HasIndex("OptionId");

                    b.ToTable("OptionsObjets");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Outillage", b =>
                {
                    b.Property<int>("OutillageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutillageId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OutillageId");

                    b.ToTable("Outillage");
                });

            modelBuilder.Entity("Domain.Entites.Objets.TypeObjet", b =>
                {
                    b.Property<int>("TypeObjetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeObjetId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeObjetId");

                    b.ToTable("TypeObjet");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Utilise", b =>
                {
                    b.Property<int>("UtiliseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtiliseId"), 1L, 1);

                    b.Property<int?>("DomaineId")
                        .HasColumnType("int");

                    b.Property<int?>("OutillageId")
                        .HasColumnType("int");

                    b.HasKey("UtiliseId");

                    b.HasIndex("DomaineId");

                    b.HasIndex("OutillageId");

                    b.ToTable("Utilise");
                });

            modelBuilder.Entity("Domain.Entites.Produits.Categorie", b =>
                {
                    b.Property<int>("CategorieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategorieId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DomaineId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategorieId");

                    b.HasIndex("DomaineId");

                    b.ToTable("Categorie");
                });

            modelBuilder.Entity("Domain.Entites.Produits.CategTarifaire", b =>
                {
                    b.Property<int>("CategTarifaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategTarifaireId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategTarifaireId");

                    b.ToTable("CategTarifaire");
                });

            modelBuilder.Entity("Domain.Entites.Produits.ClientTarif", b =>
                {
                    b.Property<int>("ClientTarifId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientTarifId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Tarif")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ClientTarifId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProduitId");

                    b.ToTable("ClientTarif");
                });

            modelBuilder.Entity("Domain.Entites.Produits.ProdCatTarifaire", b =>
                {
                    b.Property<int>("ProdCatTarifaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProdCatTarifaireId"), 1L, 1);

                    b.Property<int?>("CategTarifaireId")
                        .HasColumnType("int");

                    b.Property<int?>("DeviseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Tarif")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProdCatTarifaireId");

                    b.HasIndex("CategTarifaireId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("ProduitId");

                    b.ToTable("ProdCatTarifaire");
                });

            modelBuilder.Entity("Domain.Entites.Produits.Produit", b =>
                {
                    b.Property<int>("ProduitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProduitId"), 1L, 1);

                    b.Property<int?>("CategorieId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FamilleId")
                        .HasColumnType("int");

                    b.Property<string>("Fichier1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fichier2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fichier3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("LoadPlanning")
                        .HasColumnType("bit");

                    b.Property<bool?>("LoadSite")
                        .HasColumnType("bit");

                    b.Property<int?>("Nombre")
                        .HasColumnType("int");

                    b.Property<string>("TypeProduit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProduitId");

                    b.HasIndex("CategorieId");

                    b.ToTable("Produit");
                });

            modelBuilder.Entity("Domain.Entites.Produits.ProduitComposant", b =>
                {
                    b.Property<int>("ProduitComposantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProduitComposantId"), 1L, 1);

                    b.Property<int?>("ProduitComposantFilsId")
                        .HasColumnType("int");

                    b.Property<int?>("ProduitComposantParentId")
                        .HasColumnType("int");

                    b.Property<int?>("QteFils")
                        .HasColumnType("int");

                    b.HasKey("ProduitComposantId");

                    b.ToTable("ProduitComposant");
                });

            modelBuilder.Entity("Domain.Entites.Produits.ProduitTarif", b =>
                {
                    b.Property<int>("ProduitTarifId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProduitTarifId"), 1L, 1);

                    b.Property<int>("DeviseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<bool?>("Somme")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Tarif")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("Taxable")
                        .HasColumnType("bit");

                    b.HasKey("ProduitTarifId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("ProduitId");

                    b.ToTable("ProduitTarif");
                });

            modelBuilder.Entity("Domain.Entites.Produits.PromoTarif", b =>
                {
                    b.Property<int>("PromoTarifId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromoTarifId"), 1L, 1);

                    b.Property<int>("DeviseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Tarif")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PromoTarifId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("ProduitId");

                    b.ToTable("PromoTarif");
                });

            modelBuilder.Entity("Domain.Entites.Produits.Typetiers", b =>
                {
                    b.Property<int>("TypetiersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypetiersId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypetiersId");

                    b.ToTable("Typetiers");
                });

            modelBuilder.Entity("Domain.Entites.Produits.TypetiersTarif", b =>
                {
                    b.Property<int>("TypetiersTarifId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypetiersTarifId"), 1L, 1);

                    b.Property<int>("DeviseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Tarif")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TypetiersId")
                        .HasColumnType("int");

                    b.HasKey("TypetiersTarifId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("ProduitId");

                    b.HasIndex("TypetiersId");

                    b.ToTable("TypetiersTarif");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"), 1L, 1);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BanqueId")
                        .HasColumnType("int");

                    b.Property<int?>("CategorieId")
                        .HasColumnType("int");

                    b.Property<int?>("CiviliteId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CodePostal")
                        .HasColumnType("int");

                    b.Property<int?>("DeviseId")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupeId")
                        .HasColumnType("int");

                    b.Property<string>("Justificatif")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NbPer")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaysId")
                        .HasColumnType("int");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Siren")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Societe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Taxable")
                        .HasColumnType("bit");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeClient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypetiersId")
                        .HasColumnType("int");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Delai", b =>
                {
                    b.Property<int>("DelaiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DelaiId"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("Annule")
                        .HasColumnType("int");

                    b.Property<string>("Deconexion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnArrive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnDepart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Modifie")
                        .HasColumnType("int");

                    b.Property<int?>("Resa")
                        .HasColumnType("int");

                    b.HasKey("DelaiId");

                    b.ToTable("Delai");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.FichierResa", b =>
                {
                    b.Property<int>("FichierResaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FichierResaId"), 1L, 1);

                    b.Property<string>("Fichier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FichierResaId");

                    b.ToTable("FichierResa");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Fournisseur", b =>
                {
                    b.Property<int>("FournisseurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FournisseurId"), 1L, 1);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DelaiLivraison")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeviseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("FraisLivraison")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaiementModeId")
                        .HasColumnType("int");

                    b.Property<string>("PeriodeDePaiement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FournisseurId");

                    b.HasIndex("DeviseId");

                    b.HasIndex("PaiementModeId");

                    b.ToTable("Fournisseur");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Identite", b =>
                {
                    b.Property<int>("IdentiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentiteId"), 1L, 1);

                    b.Property<int>("CliendId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdentiteId");

                    b.HasIndex("ClientId");

                    b.ToTable("Identite");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.PaiementMode", b =>
                {
                    b.Property<int>("PaiementModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaiementModeId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaiementModeId");

                    b.ToTable("PaiementMode");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.PlanningConsult", b =>
                {
                    b.Property<int>("PlanningConsultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanningConsultId"), 1L, 1);

                    b.Property<string>("PeriodeApres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodeAvant")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlanningConsultId");

                    b.ToTable("PlanningConsult");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"), 1L, 1);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Etat")
                        .HasColumnType("int");

                    b.Property<int?>("ModepayementId")
                        .HasColumnType("int");

                    b.Property<int?>("NombrePax")
                        .HasColumnType("int");

                    b.Property<string>("NumRes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ObjetId")
                        .HasColumnType("int");

                    b.Property<int?>("PaiementModeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProId")
                        .HasColumnType("int");

                    b.Property<int?>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantite")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("StatutId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("PaiementModeId");

                    b.HasIndex("ProduitId");

                    b.HasIndex("StatutId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.ReservationMotif", b =>
                {
                    b.Property<int>("ReservationMotifId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationMotifId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Motif")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("TypeModif")
                        .HasColumnType("bit");

                    b.HasKey("ReservationMotifId");

                    b.ToTable("ReservationMotif");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Statut", b =>
                {
                    b.Property<int>("StatutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatutId"), 1L, 1);

                    b.Property<string>("Couleur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadLibelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatutId");

                    b.ToTable("Statut");
                });

            modelBuilder.Entity("Domain.Entites.Societes.CategComptable", b =>
                {
                    b.Property<int>("CategComptableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategComptableId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategComptableId");

                    b.ToTable("CategComptable");
                });

            modelBuilder.Entity("Domain.Entites.Societes.CategFacturation", b =>
                {
                    b.Property<int>("CategFacturationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategFacturationId"), 1L, 1);

                    b.Property<string>("CodeFact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompteurId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiseEnPage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NbExemplaire")
                        .HasColumnType("int");

                    b.Property<string>("Periodicite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategFacturationId");

                    b.HasIndex("CompteurId");

                    b.ToTable("CategFacturation");
                });

            modelBuilder.Entity("Domain.Entites.Societes.CategHotel", b =>
                {
                    b.Property<int>("CategHotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategHotelId"), 1L, 1);

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategHotelId");

                    b.ToTable("CategHotel", (string)null);

                    b.HasData(
                        new
                        {
                            CategHotelId = 1,
                            Libelle = "1 étoile"
                        },
                        new
                        {
                            CategHotelId = 2,
                            Libelle = "2 étoiles"
                        },
                        new
                        {
                            CategHotelId = 3,
                            Libelle = "3 étoiles"
                        },
                        new
                        {
                            CategHotelId = 4,
                            Libelle = "4 étoiles"
                        },
                        new
                        {
                            CategHotelId = 5,
                            Libelle = "5 étoiles"
                        });
                });

            modelBuilder.Entity("Domain.Entites.Societes.Civilite", b =>
                {
                    b.Property<int>("CiviliteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CiviliteId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CiviliteId");

                    b.ToTable("Civilite", (string)null);

                    b.HasData(
                        new
                        {
                            CiviliteId = 1,
                            Code = "M",
                            Libelle = "Monsieur"
                        },
                        new
                        {
                            CiviliteId = 2,
                            Code = "Mme",
                            Libelle = "Madame"
                        },
                        new
                        {
                            CiviliteId = 3,
                            Code = "Mlle",
                            Libelle = "Mademoiselle"
                        },
                        new
                        {
                            CiviliteId = 4,
                            Code = "Mx",
                            Libelle = "Neutre"
                        });
                });

            modelBuilder.Entity("Domain.Entites.Societes.Collaborateur", b =>
                {
                    b.Property<int>("CollaborateurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollaborateurId"), 1L, 1);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartementId")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MetierId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CollaborateurId");

                    b.HasIndex("MetierId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Collaborateur");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Compte", b =>
                {
                    b.Property<int>("CompteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompteId"), 1L, 1);

                    b.Property<bool?>("Auxiliaire")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sens")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompteId");

                    b.ToTable("Compte");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Config.Compteur", b =>
                {
                    b.Property<int>("CompteurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompteurId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NbSuffixe")
                        .HasColumnType("int");

                    b.Property<string>("Prefixe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Separateur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffixe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Table")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompteurId");

                    b.ToTable("Compteur");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"), 1L, 1);

                    b.Property<int?>("CiviliteId")
                        .HasColumnType("int");

                    b.Property<string>("Fonction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SocieteId")
                        .HasColumnType("int");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.HasIndex("CiviliteId");

                    b.HasIndex("SocieteId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Departement", b =>
                {
                    b.Property<int>("DepartementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartementId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartementId");

                    b.ToTable("Departement");
                });

            modelBuilder.Entity("Domain.Entites.Societes.FormeJuridique", b =>
                {
                    b.Property<int>("FormeJuridiqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormeJuridiqueId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormeJuridiqueId");

                    b.ToTable("FormeJuridique", (string)null);

                    b.HasData(
                        new
                        {
                            FormeJuridiqueId = 101,
                            Code = "EI",
                            Libelle = "Entreprise Individuelle"
                        },
                        new
                        {
                            FormeJuridiqueId = 102,
                            Code = "SARL",
                            Libelle = "Société à Responsabilité Limitée"
                        },
                        new
                        {
                            FormeJuridiqueId = 103,
                            Code = "SA",
                            Libelle = "Société Anonyme"
                        },
                        new
                        {
                            FormeJuridiqueId = 104,
                            Code = "SNC",
                            Libelle = "Société en Nom Collectif"
                        },
                        new
                        {
                            FormeJuridiqueId = 105,
                            Code = "SCS",
                            Libelle = "Société en Commandite Simple"
                        },
                        new
                        {
                            FormeJuridiqueId = 106,
                            Code = "GIE",
                            Libelle = "Groupement d'Intérêt Economique"
                        },
                        new
                        {
                            FormeJuridiqueId = 107,
                            Code = "SDET",
                            Libelle = "Société de Droit Etranger"
                        });
                });

            modelBuilder.Entity("Domain.Entites.Societes.Metier", b =>
                {
                    b.Property<int>("MetierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetierId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MetierId");

                    b.ToTable("Metier");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Pays", b =>
                {
                    b.Property<int>("PaysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaysId"), 1L, 1);

                    b.Property<string>("Code2car")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code3car")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CodeChiffre")
                        .HasColumnType("int");

                    b.Property<string>("Fuseauhoraire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibelleENG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibelleFR")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaysId");

                    b.ToTable("Pays", (string)null);

                    b.HasData(
                        new
                        {
                            PaysId = 1,
                            Code2car = "AW",
                            Code3car = "ABW",
                            CodeChiffre = 533,
                            LibelleENG = "ARUBA",
                            LibelleFR = "ARUBA"
                        },
                        new
                        {
                            PaysId = 2,
                            Code2car = "AF",
                            Code3car = "AFG",
                            CodeChiffre = 4,
                            LibelleENG = "AFGHANISTAN",
                            LibelleFR = "AFGHANISTAN"
                        },
                        new
                        {
                            PaysId = 3,
                            Code2car = "AO",
                            Code3car = "AGO",
                            CodeChiffre = 24,
                            LibelleENG = "ANGOLA",
                            LibelleFR = "ANGOLA"
                        },
                        new
                        {
                            PaysId = 4,
                            Code2car = "AI",
                            Code3car = "AIA",
                            CodeChiffre = 660,
                            LibelleENG = "ANGUILLA",
                            LibelleFR = "ANGUILLA"
                        },
                        new
                        {
                            PaysId = 5,
                            Code2car = "AL",
                            Code3car = "ALB",
                            CodeChiffre = 8,
                            LibelleENG = "ALBANIE",
                            LibelleFR = "ALBANIE"
                        },
                        new
                        {
                            PaysId = 6,
                            Code2car = "AD",
                            Code3car = "AND",
                            CodeChiffre = 20,
                            LibelleENG = "ANDORRES",
                            LibelleFR = "ANDORRES"
                        },
                        new
                        {
                            PaysId = 7,
                            Code2car = "AN",
                            Code3car = "ANT",
                            CodeChiffre = 530,
                            LibelleENG = "NETHERLANDS ANTILLES",
                            LibelleFR = "NETHERLANDS ANTILLES"
                        },
                        new
                        {
                            PaysId = 8,
                            Code2car = "AE",
                            Code3car = "ARE",
                            CodeChiffre = 784,
                            LibelleENG = "EMIRATS ARABES UNIS",
                            LibelleFR = "EMIRATS ARABES UNIS"
                        },
                        new
                        {
                            PaysId = 9,
                            Code2car = "AR",
                            Code3car = "ARG",
                            CodeChiffre = 32,
                            LibelleENG = "ARGENTINE",
                            LibelleFR = "ARGENTINE"
                        },
                        new
                        {
                            PaysId = 10,
                            Code2car = "AM",
                            Code3car = "ARM",
                            CodeChiffre = 51,
                            LibelleENG = "ARMENIE",
                            LibelleFR = "ARMENIA"
                        },
                        new
                        {
                            PaysId = 11,
                            Code2car = "AS",
                            Code3car = "ASM",
                            CodeChiffre = 16,
                            LibelleENG = "AMERICAN SAMOA",
                            LibelleFR = "AMERICAN SAMOA"
                        },
                        new
                        {
                            PaysId = 12,
                            Code2car = "AQ",
                            Code3car = "ATA",
                            CodeChiffre = 10,
                            LibelleENG = "ANTARCTIC",
                            LibelleFR = "ANTARCTICA"
                        },
                        new
                        {
                            PaysId = 13,
                            Code2car = "TF",
                            Code3car = "ATF",
                            CodeChiffre = 260,
                            LibelleENG = "FRENCH SOUTHERN TERRITORIES",
                            LibelleFR = "FRENCH SOUTHERN TERRITORIES"
                        },
                        new
                        {
                            PaysId = 14,
                            Code2car = "AG",
                            Code3car = "ATG",
                            CodeChiffre = 32,
                            LibelleENG = "ANTIGUA AND BARBUDA",
                            LibelleFR = "ANTIGUA"
                        },
                        new
                        {
                            PaysId = 15,
                            Code2car = "AU",
                            Code3car = "AUS",
                            CodeChiffre = 36,
                            LibelleENG = "AUSTRALIA",
                            LibelleFR = "AUSTRALIE"
                        },
                        new
                        {
                            PaysId = 16,
                            Code2car = "AT",
                            Code3car = "AUT",
                            CodeChiffre = 40,
                            LibelleENG = "AUSTRIA",
                            LibelleFR = "AUTRICHE"
                        },
                        new
                        {
                            PaysId = 17,
                            Code2car = "AZ",
                            Code3car = "AZE",
                            CodeChiffre = 31,
                            LibelleENG = "AZERBAIJAN",
                            LibelleFR = "AZERBAIJAN"
                        },
                        new
                        {
                            PaysId = 18,
                            Code2car = "BI",
                            Code3car = "BDI",
                            CodeChiffre = 108,
                            LibelleENG = "BURUNDI",
                            LibelleFR = "BURUNDI"
                        },
                        new
                        {
                            PaysId = 19,
                            Code2car = "BE",
                            Code3car = "BEL",
                            CodeChiffre = 32,
                            LibelleENG = "BELGIUM",
                            LibelleFR = "BELGIQUE"
                        },
                        new
                        {
                            PaysId = 20,
                            Code2car = "BJ",
                            Code3car = "BEN",
                            CodeChiffre = 204,
                            LibelleENG = "BENIN",
                            LibelleFR = "BENIN"
                        },
                        new
                        {
                            PaysId = 21,
                            Code2car = "BF",
                            Code3car = "BFA",
                            CodeChiffre = 854,
                            LibelleENG = "BURKINA FASO",
                            LibelleFR = "BURKINA FASO"
                        },
                        new
                        {
                            PaysId = 22,
                            Code2car = "BD",
                            Code3car = "BGD",
                            CodeChiffre = 50,
                            LibelleENG = "BENGLADESH",
                            LibelleFR = "BENGLADESH"
                        },
                        new
                        {
                            PaysId = 23,
                            Code2car = "BG",
                            Code3car = "BGR",
                            CodeChiffre = 100,
                            LibelleENG = "BULGARIE",
                            LibelleFR = "BULGARIE"
                        },
                        new
                        {
                            PaysId = 24,
                            Code2car = "BH",
                            Code3car = "BHR",
                            CodeChiffre = 48,
                            LibelleENG = "BAHRAIN",
                            LibelleFR = "BAHRAIN"
                        },
                        new
                        {
                            PaysId = 25,
                            Code2car = "BS",
                            Code3car = "BHS",
                            CodeChiffre = 44,
                            LibelleENG = "BAHAMAS",
                            LibelleFR = "BAHAMAS"
                        },
                        new
                        {
                            PaysId = 26,
                            Code2car = "BA",
                            Code3car = "BIH",
                            CodeChiffre = 70,
                            LibelleENG = "BOSNIA AND HERZEGOWINA",
                            LibelleFR = "BOSNIE HERZEGOVINE"
                        },
                        new
                        {
                            PaysId = 27,
                            Code2car = "BY",
                            Code3car = "BLR",
                            CodeChiffre = 112,
                            LibelleENG = "BELARUS",
                            LibelleFR = "BELARUS"
                        },
                        new
                        {
                            PaysId = 28,
                            Code2car = "BZ",
                            Code3car = "BLZ",
                            CodeChiffre = 84,
                            LibelleENG = "BELIZE",
                            LibelleFR = "BELIZE"
                        },
                        new
                        {
                            PaysId = 29,
                            Code2car = "BM",
                            Code3car = "BMU",
                            CodeChiffre = 60,
                            LibelleENG = "BERMUDA",
                            LibelleFR = "BERMUDES"
                        },
                        new
                        {
                            PaysId = 30,
                            Code2car = "BO",
                            Code3car = "BOL",
                            CodeChiffre = 68,
                            LibelleENG = "BOLIVIA",
                            LibelleFR = "BOLIVIE"
                        },
                        new
                        {
                            PaysId = 31,
                            Code2car = "BR",
                            Code3car = "BRA",
                            CodeChiffre = 76,
                            LibelleENG = "BRAZIL",
                            LibelleFR = "BRESIL"
                        },
                        new
                        {
                            PaysId = 32,
                            Code2car = "BB",
                            Code3car = "BRB",
                            CodeChiffre = 52,
                            LibelleENG = "BARBADOS",
                            LibelleFR = "BARBADES"
                        },
                        new
                        {
                            PaysId = 33,
                            Code2car = "BN",
                            Code3car = "BRN",
                            CodeChiffre = 96,
                            LibelleENG = "BRUNEI DARUSSALAM",
                            LibelleFR = "BRUNEI DARUSSALAM"
                        },
                        new
                        {
                            PaysId = 34,
                            Code2car = "BT",
                            Code3car = "BTN",
                            CodeChiffre = 64,
                            LibelleENG = "BHUTAN",
                            LibelleFR = "BHUTAN"
                        },
                        new
                        {
                            PaysId = 35,
                            Code2car = "BV",
                            Code3car = "BVT",
                            CodeChiffre = 74,
                            LibelleENG = "BOUVET ISLAND",
                            LibelleFR = "BOUVET ISLAND"
                        },
                        new
                        {
                            PaysId = 36,
                            Code2car = "BW",
                            Code3car = "BWA",
                            CodeChiffre = 72,
                            LibelleENG = "BOTSWANA",
                            LibelleFR = "BOTSWANA"
                        },
                        new
                        {
                            PaysId = 37,
                            Code2car = "CF",
                            Code3car = "CAF",
                            CodeChiffre = 140,
                            LibelleENG = "CENTRAL AFRICAN REPUBLIC",
                            LibelleFR = "CENTRAFRIQUE"
                        },
                        new
                        {
                            PaysId = 38,
                            Code2car = "CA",
                            Code3car = "CAN",
                            CodeChiffre = 124,
                            LibelleENG = "CANADA",
                            LibelleFR = "CANADA"
                        },
                        new
                        {
                            PaysId = 39,
                            Code2car = "CC",
                            Code3car = "CCK",
                            CodeChiffre = 166,
                            LibelleENG = "COCOS (KEELING) ISLANDS",
                            LibelleFR = "BRECOCOS (KEELING) ISLANDSSIL"
                        },
                        new
                        {
                            PaysId = 40,
                            Code2car = "CH",
                            Code3car = "CHE",
                            CodeChiffre = 756,
                            LibelleENG = "SWITZERLAND",
                            LibelleFR = "SUISSE"
                        },
                        new
                        {
                            PaysId = 41,
                            Code2car = "CL",
                            Code3car = "CHL",
                            CodeChiffre = 152,
                            LibelleENG = "CHILE",
                            LibelleFR = "CHILI"
                        },
                        new
                        {
                            PaysId = 42,
                            Code2car = "CN",
                            Code3car = "CHN",
                            CodeChiffre = 156,
                            LibelleENG = "CHINA",
                            LibelleFR = "CHINE"
                        },
                        new
                        {
                            PaysId = 43,
                            Code2car = "CI",
                            Code3car = "CIV",
                            CodeChiffre = 384,
                            LibelleENG = "COTE D''IVOIRE",
                            LibelleFR = "COTE D''IVOIRE"
                        },
                        new
                        {
                            PaysId = 44,
                            Code2car = "CM",
                            Code3car = "CMR",
                            CodeChiffre = 120,
                            LibelleENG = "CAMEROON",
                            LibelleFR = "CAMEROUN"
                        },
                        new
                        {
                            PaysId = 45,
                            Code2car = "CD",
                            Code3car = "COD",
                            CodeChiffre = 180,
                            LibelleENG = "CONGO, Democratic Republic of (was Zaire)",
                            LibelleFR = "CONGO (Zaire)"
                        },
                        new
                        {
                            PaysId = 46,
                            Code2car = "CG",
                            Code3car = "COG",
                            CodeChiffre = 178,
                            LibelleENG = "CONGO, People''s Republic of",
                            LibelleFR = "CONGO"
                        },
                        new
                        {
                            PaysId = 47,
                            Code2car = "CK",
                            Code3car = "COK",
                            CodeChiffre = 184,
                            LibelleENG = "COOK ISLANDS",
                            LibelleFR = "COOK ISLANDS"
                        },
                        new
                        {
                            PaysId = 48,
                            Code2car = "CO",
                            Code3car = "COL",
                            CodeChiffre = 170,
                            LibelleENG = "COLOMBIA",
                            LibelleFR = "COLOMBIE"
                        },
                        new
                        {
                            PaysId = 49,
                            Code2car = "KM",
                            Code3car = "COM",
                            CodeChiffre = 174,
                            LibelleENG = "COMOROS",
                            LibelleFR = "COMORES"
                        },
                        new
                        {
                            PaysId = 50,
                            Code2car = "CV",
                            Code3car = "CPV",
                            CodeChiffre = 132,
                            LibelleENG = "CAPE VERDE",
                            LibelleFR = "CAP VERT"
                        },
                        new
                        {
                            PaysId = 51,
                            Code2car = "CR",
                            Code3car = "CRI",
                            CodeChiffre = 188,
                            LibelleENG = "COSTA RICA",
                            LibelleFR = "COSTA RICA"
                        },
                        new
                        {
                            PaysId = 52,
                            Code2car = "CU",
                            Code3car = "CUB",
                            CodeChiffre = 192,
                            LibelleENG = "CUBA",
                            LibelleFR = "CUBA"
                        },
                        new
                        {
                            PaysId = 53,
                            Code2car = "CX",
                            Code3car = "CXR",
                            CodeChiffre = 162,
                            LibelleENG = "CHRISTMAS ISLAND",
                            LibelleFR = "CHRISTMAS ISLAND"
                        },
                        new
                        {
                            PaysId = 54,
                            Code2car = "KY",
                            Code3car = "CYM",
                            CodeChiffre = 136,
                            LibelleENG = "CAYMAN ISLANDS",
                            LibelleFR = "CAYMAN ISLANDS"
                        },
                        new
                        {
                            PaysId = 55,
                            Code2car = "CY",
                            Code3car = "CYP",
                            CodeChiffre = 196,
                            LibelleENG = "CYPRUS",
                            LibelleFR = "CHYPRE"
                        },
                        new
                        {
                            PaysId = 56,
                            Code2car = "CZ",
                            Code3car = "CZE",
                            CodeChiffre = 203,
                            LibelleENG = "CZECH REPUBLIC",
                            LibelleFR = "CZECH REPUBLIC"
                        },
                        new
                        {
                            PaysId = 57,
                            Code2car = "DE",
                            Code3car = "DEU",
                            CodeChiffre = 276,
                            LibelleENG = "GERMANY",
                            LibelleFR = "ALLEMAGNE"
                        },
                        new
                        {
                            PaysId = 58,
                            Code2car = "DJ",
                            Code3car = "DJI",
                            CodeChiffre = 262,
                            LibelleENG = "DJIBOUTI",
                            LibelleFR = "DJIBOUTI"
                        },
                        new
                        {
                            PaysId = 59,
                            Code2car = "DM",
                            Code3car = "DMA",
                            CodeChiffre = 212,
                            LibelleENG = "DOMINICA",
                            LibelleFR = "DOMINICA"
                        },
                        new
                        {
                            PaysId = 60,
                            Code2car = "DK",
                            Code3car = "DNK",
                            CodeChiffre = 208,
                            LibelleENG = "DENMARK",
                            LibelleFR = "DANEMARK"
                        },
                        new
                        {
                            PaysId = 61,
                            Code2car = "DO",
                            Code3car = "DOM",
                            CodeChiffre = 214,
                            LibelleENG = "DOMINICAN REPUBLIC",
                            LibelleFR = "DOMINICAN REPUBLIC"
                        },
                        new
                        {
                            PaysId = 62,
                            Code2car = "DZ",
                            Code3car = "DZA",
                            CodeChiffre = 12,
                            LibelleENG = "ALGERIA",
                            LibelleFR = "ALGERIE"
                        },
                        new
                        {
                            PaysId = 63,
                            Code2car = "EC",
                            Code3car = "ECU",
                            CodeChiffre = 218,
                            LibelleENG = "ECUADOR",
                            LibelleFR = "EQUATEUR"
                        },
                        new
                        {
                            PaysId = 64,
                            Code2car = "EG",
                            Code3car = "EGY",
                            CodeChiffre = 818,
                            LibelleENG = "EGYPT",
                            LibelleFR = "EGYPTE"
                        },
                        new
                        {
                            PaysId = 65,
                            Code2car = "ER",
                            Code3car = "ERI",
                            CodeChiffre = 232,
                            LibelleENG = "ERITREA",
                            LibelleFR = "ERYTHREE"
                        },
                        new
                        {
                            PaysId = 66,
                            Code2car = "EH",
                            Code3car = "ESH",
                            CodeChiffre = 732,
                            LibelleENG = "WESTERN SAHARA",
                            LibelleFR = "SAHARA OCCIDENTAL"
                        },
                        new
                        {
                            PaysId = 67,
                            Code2car = "ES",
                            Code3car = "ESP",
                            CodeChiffre = 724,
                            LibelleENG = "SPAIN",
                            LibelleFR = "ESPAGNE"
                        },
                        new
                        {
                            PaysId = 68,
                            Code2car = "EE",
                            Code3car = "EST",
                            CodeChiffre = 233,
                            LibelleENG = "ESTONIA",
                            LibelleFR = "ETHIOPIE"
                        },
                        new
                        {
                            PaysId = 69,
                            Code2car = "ET",
                            Code3car = "ETH",
                            CodeChiffre = 231,
                            LibelleENG = "ETHIOPIA",
                            LibelleFR = "CAPVERT"
                        },
                        new
                        {
                            PaysId = 70,
                            Code2car = "FI",
                            Code3car = "FIN",
                            CodeChiffre = 246,
                            LibelleENG = "FINLAND",
                            LibelleFR = "FINLANDE"
                        },
                        new
                        {
                            PaysId = 71,
                            Code2car = "FJ",
                            Code3car = "FJI",
                            CodeChiffre = 242,
                            LibelleENG = "FIJI",
                            LibelleFR = "FIDJI"
                        },
                        new
                        {
                            PaysId = 72,
                            Code2car = "FK",
                            Code3car = "FLK",
                            CodeChiffre = 238,
                            LibelleENG = "FALKLAND ISLANDS (MALVINAS)",
                            LibelleFR = "FALKLAND ISLANDS (MALVINAS)"
                        },
                        new
                        {
                            PaysId = 73,
                            Code2car = "FR",
                            Code3car = "FRA",
                            CodeChiffre = 250,
                            LibelleENG = "FRANCE",
                            LibelleFR = "FRANCE"
                        },
                        new
                        {
                            PaysId = 74,
                            Code2car = "FO",
                            Code3car = "FRO",
                            CodeChiffre = 234,
                            LibelleENG = "FAROE ISLANDS",
                            LibelleFR = "FAROE ISLANDS"
                        },
                        new
                        {
                            PaysId = 75,
                            Code2car = "FM",
                            Code3car = "FSM",
                            CodeChiffre = 583,
                            LibelleENG = "MICRONESIA, FEDERATED STATES OF",
                            LibelleFR = "MICRONESIA, FEDERATED STATES OF"
                        },
                        new
                        {
                            PaysId = 76,
                            Code2car = "FX",
                            Code3car = "FXX",
                            CodeChiffre = 249,
                            LibelleENG = "FRANCE, METROPOLITAN",
                            LibelleFR = "FRANCE, METROPOLITAN"
                        },
                        new
                        {
                            PaysId = 77,
                            Code2car = "GA",
                            Code3car = "GAB",
                            CodeChiffre = 266,
                            LibelleENG = "GABON",
                            LibelleFR = "GABON"
                        },
                        new
                        {
                            PaysId = 78,
                            Code2car = "GB",
                            Code3car = "GBR",
                            CodeChiffre = 826,
                            LibelleENG = "UNITED KINGDOM",
                            LibelleFR = "ROYAUME UNI"
                        },
                        new
                        {
                            PaysId = 79,
                            Code2car = "GE",
                            Code3car = "GEO",
                            CodeChiffre = 268,
                            LibelleENG = "GEORGIA",
                            LibelleFR = "GEORGIE"
                        },
                        new
                        {
                            PaysId = 80,
                            Code2car = "GH",
                            Code3car = "GHA",
                            CodeChiffre = 288,
                            LibelleENG = "GHANA",
                            LibelleFR = "GHANA"
                        },
                        new
                        {
                            PaysId = 81,
                            Code2car = "GI",
                            Code3car = "GIB",
                            CodeChiffre = 292,
                            LibelleENG = "GIBRALTAR",
                            LibelleFR = "GIBRALTAR"
                        },
                        new
                        {
                            PaysId = 82,
                            Code2car = "GN",
                            Code3car = "GIN",
                            CodeChiffre = 324,
                            LibelleENG = "GUINEA",
                            LibelleFR = "GUINEE CONAKRY"
                        },
                        new
                        {
                            PaysId = 83,
                            Code2car = "GP",
                            Code3car = "GLP",
                            CodeChiffre = 312,
                            LibelleENG = "GUADELOUPE",
                            LibelleFR = "GUADELOUPE"
                        },
                        new
                        {
                            PaysId = 84,
                            Code2car = "GM",
                            Code3car = "GMB",
                            CodeChiffre = 270,
                            LibelleENG = "GAMBIA",
                            LibelleFR = "GAMBIE"
                        },
                        new
                        {
                            PaysId = 85,
                            Code2car = "GW",
                            Code3car = "GNB",
                            CodeChiffre = 624,
                            LibelleENG = "GUINEA-BISSAU",
                            LibelleFR = "GUINEE-BISSAU"
                        },
                        new
                        {
                            PaysId = 86,
                            Code2car = "GQ",
                            Code3car = "GNQ",
                            CodeChiffre = 226,
                            LibelleENG = "EQUATORIAL GUINEA",
                            LibelleFR = "GUINEE EQUATORIALE"
                        },
                        new
                        {
                            PaysId = 87,
                            Code2car = "GR",
                            Code3car = "GRC",
                            CodeChiffre = 300,
                            LibelleENG = "GREECE",
                            LibelleFR = "GRECE"
                        },
                        new
                        {
                            PaysId = 88,
                            Code2car = "GD",
                            Code3car = "GRD",
                            CodeChiffre = 308,
                            LibelleENG = "GRENADA",
                            LibelleFR = "GRENADE"
                        },
                        new
                        {
                            PaysId = 89,
                            Code2car = "GL",
                            Code3car = "GRL",
                            CodeChiffre = 304,
                            LibelleENG = "GREENLAND",
                            LibelleFR = "GREENLAND"
                        },
                        new
                        {
                            PaysId = 90,
                            Code2car = "GT",
                            Code3car = "GTM",
                            CodeChiffre = 320,
                            LibelleENG = "GUATEMALA",
                            LibelleFR = "GUATEMALA"
                        },
                        new
                        {
                            PaysId = 91,
                            Code2car = "GF",
                            Code3car = "GUF",
                            CodeChiffre = 254,
                            LibelleENG = "FRENCH GUIANA",
                            LibelleFR = "GUYANE FRANCAISE"
                        },
                        new
                        {
                            PaysId = 92,
                            Code2car = "GU",
                            Code3car = "GUM",
                            CodeChiffre = 316,
                            LibelleENG = "GUAM",
                            LibelleFR = "GUAM"
                        },
                        new
                        {
                            PaysId = 93,
                            Code2car = "GY",
                            Code3car = "GUY",
                            CodeChiffre = 328,
                            LibelleENG = "GUYANA",
                            LibelleFR = "GUYANE"
                        },
                        new
                        {
                            PaysId = 94,
                            Code2car = "HK",
                            Code3car = "HKG",
                            CodeChiffre = 344,
                            LibelleENG = "HONG KONG",
                            LibelleFR = "HONG KONG"
                        },
                        new
                        {
                            PaysId = 95,
                            Code2car = "HM",
                            Code3car = "HMD",
                            CodeChiffre = 334,
                            LibelleENG = "HEARD AND MC DONALD ISLANDS",
                            LibelleFR = "HEARD AND MC DONALD ISLANDS"
                        },
                        new
                        {
                            PaysId = 96,
                            Code2car = "HN",
                            Code3car = "HND",
                            CodeChiffre = 340,
                            LibelleENG = "HONDURAS",
                            LibelleFR = "HONDURAS"
                        },
                        new
                        {
                            PaysId = 97,
                            Code2car = "HR",
                            Code3car = "HRV",
                            CodeChiffre = 191,
                            LibelleENG = "CROATIA (local name: Hrvatska)",
                            LibelleFR = "CROATIE"
                        },
                        new
                        {
                            PaysId = 98,
                            Code2car = "HT",
                            Code3car = "HTI",
                            CodeChiffre = 332,
                            LibelleENG = "HAITI",
                            LibelleFR = "HAITI"
                        },
                        new
                        {
                            PaysId = 99,
                            Code2car = "HU",
                            Code3car = "HUN",
                            CodeChiffre = 348,
                            LibelleENG = "HUNGARY",
                            LibelleFR = "HONGRIE"
                        },
                        new
                        {
                            PaysId = 100,
                            Code2car = "ID",
                            Code3car = "IDN",
                            CodeChiffre = 360,
                            LibelleENG = "INDONESIA",
                            LibelleFR = "INDONESIE"
                        });
                });

            modelBuilder.Entity("Domain.Entites.Societes.Professionnel", b =>
                {
                    b.Property<int>("ProfessionnelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfessionnelId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaysId")
                        .HasColumnType("int");

                    b.Property<string>("Siren")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Societe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypetiersId")
                        .HasColumnType("int");

                    b.HasKey("ProfessionnelId");

                    b.HasIndex("PaysId");

                    b.HasIndex("TypetiersId");

                    b.ToTable("Professionnel");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartementId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.HasIndex("DepartementId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Societe", b =>
                {
                    b.Property<int>("SocieteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SocieteId"), 1L, 1);

                    b.Property<string>("AdressCompl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Capital")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CategHotelId")
                        .HasColumnType("int");

                    b.Property<string>("ChampLibre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChampLibre2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChampLibre3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormeJuridiqueId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaysId")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionCode")
                        .HasColumnType("int");

                    b.Property<string>("Stat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SocieteId");

                    b.HasIndex("CategHotelId");

                    b.HasIndex("FormeJuridiqueId");

                    b.HasIndex("PaysId");

                    b.ToTable("Societe", (string)null);

                    b.HasData(
                        new
                        {
                            SocieteId = 1,
                            AdressCompl = "Ambohibao",
                            Adresse = "Analamahitsy",
                            Capital = 10000m,
                            CategHotelId = 1,
                            Email = "fidele999@gmail.com",
                            FormeJuridiqueId = 101,
                            Nom = "O3 Consulting",
                            PaysId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entites.Devises.CotationDevise", b =>
                {
                    b.HasOne("Domain.Entites.Devises.Devise", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devise");
                });

            modelBuilder.Entity("Domain.Entites.Devises.TenuCptDevise", b =>
                {
                    b.HasOne("Domain.Entites.Devises.Devise", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devise");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Famille", b =>
                {
                    b.HasOne("Domain.Entites.Objets.Domaine", "Domaine")
                        .WithMany()
                        .HasForeignKey("DomaineId");

                    b.Navigation("Domaine");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Maintenance", b =>
                {
                    b.HasOne("Domain.Entites.Objets.Objet", "Objet")
                        .WithMany("Maintenance")
                        .HasForeignKey("ObjetId");

                    b.Navigation("Objet");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Objet", b =>
                {
                    b.HasOne("Domain.Entites.Objets.Domaine", "Domaine")
                        .WithMany()
                        .HasForeignKey("DomaineId");

                    b.HasOne("Domain.Entites.Objets.TypeObjet", "TypeObjet")
                        .WithMany("Objet")
                        .HasForeignKey("TypeObjetId");

                    b.Navigation("Domaine");

                    b.Navigation("TypeObjet");
                });

            modelBuilder.Entity("Domain.Entites.Objets.ObjetProduit", b =>
                {
                    b.HasOne("Domain.Entites.Objets.Objet", "Objet")
                        .WithMany("ObjetProduits")
                        .HasForeignKey("ObjetId");

                    b.Navigation("Objet");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Option", b =>
                {
                    b.HasOne("Domain.Entites.Objets.Domaine", "Domaine")
                        .WithMany()
                        .HasForeignKey("DomaineId");

                    b.Navigation("Domaine");
                });

            modelBuilder.Entity("Domain.Entites.Objets.OptionList", b =>
                {
                    b.HasOne("Domain.Entites.Objets.Option", "Option")
                        .WithMany("OptionLists")
                        .HasForeignKey("OptionId");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Domain.Entites.Objets.OptionsObjets", b =>
                {
                    b.HasOne("Domain.Entites.Objets.Objet", "Objet")
                        .WithMany("OptionsObjets")
                        .HasForeignKey("ObjetId");

                    b.HasOne("Domain.Entites.Objets.Option", "Option")
                        .WithMany("OptionsObjets")
                        .HasForeignKey("OptionId");

                    b.Navigation("Objet");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Utilise", b =>
                {
                    b.HasOne("Domain.Entites.Objets.Domaine", "Domaine")
                        .WithMany()
                        .HasForeignKey("DomaineId");

                    b.HasOne("Domain.Entites.Objets.Outillage", "Outillage")
                        .WithMany("Utilises")
                        .HasForeignKey("OutillageId");

                    b.Navigation("Domaine");

                    b.Navigation("Outillage");
                });

            modelBuilder.Entity("Domain.Entites.Produits.Categorie", b =>
                {
                    b.HasOne("Domain.Entites.Objets.Domaine", "Domaine")
                        .WithMany()
                        .HasForeignKey("DomaineId");

                    b.Navigation("Domaine");
                });

            modelBuilder.Entity("Domain.Entites.Produits.ClientTarif", b =>
                {
                    b.HasOne("Domain.Entites.Reservations.Client", "Client")
                        .WithMany("ClientTarif")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Produits.Produit", "Produit")
                        .WithMany("ClientTarif")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Domain.Entites.Produits.ProdCatTarifaire", b =>
                {
                    b.HasOne("Domain.Entites.Produits.CategTarifaire", "CategTarifaire")
                        .WithMany("ProdCatTarifaires")
                        .HasForeignKey("CategTarifaireId");

                    b.HasOne("Domain.Entites.Devises.Devise", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId");

                    b.HasOne("Domain.Entites.Produits.Produit", "Produit")
                        .WithMany("ProdCatTarifaire")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategTarifaire");

                    b.Navigation("Devise");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Domain.Entites.Produits.Produit", b =>
                {
                    b.HasOne("Domain.Entites.Produits.Categorie", "Categorie")
                        .WithMany("Produits")
                        .HasForeignKey("CategorieId");

                    b.Navigation("Categorie");
                });

            modelBuilder.Entity("Domain.Entites.Produits.ProduitTarif", b =>
                {
                    b.HasOne("Domain.Entites.Devises.Devise", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Produits.Produit", "Produit")
                        .WithMany("ProduitTarif")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devise");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Domain.Entites.Produits.PromoTarif", b =>
                {
                    b.HasOne("Domain.Entites.Devises.Devise", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Produits.Produit", "Produit")
                        .WithMany("PromoTarif")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devise");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Domain.Entites.Produits.TypetiersTarif", b =>
                {
                    b.HasOne("Domain.Entites.Devises.Devise", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Produits.Produit", "Produit")
                        .WithMany("TypetiersTarif")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Produits.Typetiers", "Typetiers")
                        .WithMany()
                        .HasForeignKey("TypetiersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devise");

                    b.Navigation("Produit");

                    b.Navigation("Typetiers");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Fournisseur", b =>
                {
                    b.HasOne("Domain.Entites.Devises.Devise", "Devise")
                        .WithMany()
                        .HasForeignKey("DeviseId");

                    b.HasOne("Domain.Entites.Reservations.PaiementMode", "PaiementMode")
                        .WithMany()
                        .HasForeignKey("PaiementModeId");

                    b.Navigation("Devise");

                    b.Navigation("PaiementMode");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Identite", b =>
                {
                    b.HasOne("Domain.Entites.Reservations.Client", "Client")
                        .WithMany("Identite")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Reservation", b =>
                {
                    b.HasOne("Domain.Entites.Reservations.Client", "Client")
                        .WithMany("Reservation")
                        .HasForeignKey("ClientId");

                    b.HasOne("Domain.Entites.Reservations.PaiementMode", "PaiementMode")
                        .WithMany()
                        .HasForeignKey("PaiementModeId");

                    b.HasOne("Domain.Entites.Produits.Produit", "Produit")
                        .WithMany("Reservation")
                        .HasForeignKey("ProduitId");

                    b.HasOne("Domain.Entites.Reservations.Statut", "Statut")
                        .WithMany()
                        .HasForeignKey("StatutId");

                    b.Navigation("Client");

                    b.Navigation("PaiementMode");

                    b.Navigation("Produit");

                    b.Navigation("Statut");
                });

            modelBuilder.Entity("Domain.Entites.Societes.CategFacturation", b =>
                {
                    b.HasOne("Domain.Entites.Societes.Config.Compteur", "Compteur")
                        .WithMany("CategFacturations")
                        .HasForeignKey("CompteurId");

                    b.Navigation("Compteur");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Collaborateur", b =>
                {
                    b.HasOne("Domain.Entites.Societes.Metier", "Metier")
                        .WithMany("Collaborateurs")
                        .HasForeignKey("MetierId");

                    b.HasOne("Domain.Entites.Societes.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("Metier");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Contact", b =>
                {
                    b.HasOne("Domain.Entites.Societes.Civilite", "Civilite")
                        .WithMany("Contacts")
                        .HasForeignKey("CiviliteId");

                    b.HasOne("Domain.Entites.Societes.Societe", "Societe")
                        .WithMany("Contacts")
                        .HasForeignKey("SocieteId");

                    b.Navigation("Civilite");

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Professionnel", b =>
                {
                    b.HasOne("Domain.Entites.Societes.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId");

                    b.HasOne("Domain.Entites.Produits.Typetiers", "Typetiers")
                        .WithMany()
                        .HasForeignKey("TypetiersId");

                    b.Navigation("Pays");

                    b.Navigation("Typetiers");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Service", b =>
                {
                    b.HasOne("Domain.Entites.Societes.Departement", "Departement")
                        .WithMany()
                        .HasForeignKey("DepartementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departement");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Societe", b =>
                {
                    b.HasOne("Domain.Entites.Societes.CategHotel", "CategHotel")
                        .WithMany()
                        .HasForeignKey("CategHotelId");

                    b.HasOne("Domain.Entites.Societes.FormeJuridique", "FormeJuridique")
                        .WithMany("Societes")
                        .HasForeignKey("FormeJuridiqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Societes.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategHotel");

                    b.Navigation("FormeJuridique");

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Objet", b =>
                {
                    b.Navigation("Maintenance");

                    b.Navigation("ObjetProduits");

                    b.Navigation("OptionsObjets");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Option", b =>
                {
                    b.Navigation("OptionLists");

                    b.Navigation("OptionsObjets");
                });

            modelBuilder.Entity("Domain.Entites.Objets.Outillage", b =>
                {
                    b.Navigation("Utilises");
                });

            modelBuilder.Entity("Domain.Entites.Objets.TypeObjet", b =>
                {
                    b.Navigation("Objet");
                });

            modelBuilder.Entity("Domain.Entites.Produits.Categorie", b =>
                {
                    b.Navigation("Produits");
                });

            modelBuilder.Entity("Domain.Entites.Produits.CategTarifaire", b =>
                {
                    b.Navigation("ProdCatTarifaires");
                });

            modelBuilder.Entity("Domain.Entites.Produits.Produit", b =>
                {
                    b.Navigation("ClientTarif");

                    b.Navigation("ProdCatTarifaire");

                    b.Navigation("ProduitTarif");

                    b.Navigation("PromoTarif");

                    b.Navigation("Reservation");

                    b.Navigation("TypetiersTarif");
                });

            modelBuilder.Entity("Domain.Entites.Reservations.Client", b =>
                {
                    b.Navigation("ClientTarif");

                    b.Navigation("Identite");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Civilite", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Config.Compteur", b =>
                {
                    b.Navigation("CategFacturations");
                });

            modelBuilder.Entity("Domain.Entites.Societes.FormeJuridique", b =>
                {
                    b.Navigation("Societes");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Metier", b =>
                {
                    b.Navigation("Collaborateurs");
                });

            modelBuilder.Entity("Domain.Entites.Societes.Societe", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
